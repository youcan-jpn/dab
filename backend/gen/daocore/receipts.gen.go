// Code generated by "script/dbgen". DO NOT EDIT.
package daocore

import (
	"context"
	"database/sql"
	"strings"
	"time"

	"github.com/Masterminds/squirrel"

	"github.com/youcan-jpn/dab/backend/src/dberror"
	"github.com/youcan-jpn/dab/backend/src/util/filter"
)

const ReceiptTableName = "receipts"

var ReceiptAllColumns = []string{
	"receipt_id",
	"shop_id",
	"currency_id",
	"total_price",
	"purchase_date",
	"modified_at",
	"created_at",
}

var ReceiptColumnsWOMagics = []string{
	"receipt_id",
	"shop_id",
	"currency_id",
	"total_price",
	"purchase_date",
	"modified_at",
}

var ReceiptPrimaryKeyColumns = []string{
	"receipt_id",
}

type Receipt struct {
	ReceiptID    int
	ShopID       int
	CurrencyID   int
	TotalPrice   float32
	PurchaseDate *time.Time
	ModifiedAt   *time.Time
	CreatedAt    *time.Time
}

func (t *Receipt) Values() []interface{} {
	return []interface{}{
		t.ReceiptID,
		t.ShopID,
		t.CurrencyID,
		t.TotalPrice,
		t.PurchaseDate,
		t.ModifiedAt,
	}
}

func (t *Receipt) SetMap() map[string]interface{} {
	return map[string]interface{}{
		"receipt_id":    t.ReceiptID,
		"shop_id":       t.ShopID,
		"currency_id":   t.CurrencyID,
		"total_price":   t.TotalPrice,
		"purchase_date": t.PurchaseDate,
		"modified_at":   t.ModifiedAt,
	}
}

func (t *Receipt) Ptrs() []interface{} {
	return []interface{}{
		&t.ReceiptID,
		&t.ShopID,
		&t.CurrencyID,
		&t.TotalPrice,
		&t.PurchaseDate,
		&t.ModifiedAt,
		&t.CreatedAt,
	}
}

func IterateReceipt(sc interface{ Scan(...interface{}) error }) (Receipt, error) {
	t := Receipt{}
	if err := sc.Scan(t.Ptrs()...); err != nil {
		return Receipt{}, dberror.MapError(err)
	}
	return t, nil
}

func SelectReceiptByTotalPrice(ctx context.Context, txn *sql.Tx, total_price *float32) ([]*Receipt, error) {
	eq := squirrel.Eq{}
	if total_price != nil {
		eq["total_price"] = *total_price
	}
	query, params, err := squirrel.
		Select(ReceiptAllColumns...).
		From(ReceiptTableName).
		Where(eq).
		ToSql()
	if err != nil {
		return nil, dberror.MapError(err)
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return nil, dberror.MapError(err)
	}
	rows, err := stmt.QueryContext(ctx, params...)
	if err != nil {
		return nil, dberror.MapError(err)
	}
	res := make([]*Receipt, 0)
	for rows.Next() {
		t, err := IterateReceipt(rows)
		if err != nil {
			return nil, dberror.MapError(err)
		}
		res = append(res, &t)
	}
	return res, nil
}

func SelectReceiptByPurchaseDate(ctx context.Context, txn *sql.Tx, purchase_date **time.Time) ([]*Receipt, error) {
	eq := squirrel.Eq{}
	if purchase_date != nil {
		eq["purchase_date"] = *purchase_date
	}
	query, params, err := squirrel.
		Select(ReceiptAllColumns...).
		From(ReceiptTableName).
		Where(eq).
		ToSql()
	if err != nil {
		return nil, dberror.MapError(err)
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return nil, dberror.MapError(err)
	}
	rows, err := stmt.QueryContext(ctx, params...)
	if err != nil {
		return nil, dberror.MapError(err)
	}
	res := make([]*Receipt, 0)
	for rows.Next() {
		t, err := IterateReceipt(rows)
		if err != nil {
			return nil, dberror.MapError(err)
		}
		res = append(res, &t)
	}
	return res, nil
}

func SelectOneReceiptByReceiptID(ctx context.Context, txn *sql.Tx, receipt_id *int) (Receipt, error) {
	eq := squirrel.Eq{}
	if receipt_id != nil {
		eq["receipt_id"] = *receipt_id
	}
	query, params, err := squirrel.
		Select(ReceiptAllColumns...).
		From(ReceiptTableName).
		Where(eq).
		ToSql()
	if err != nil {
		return Receipt{}, dberror.MapError(err)
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return Receipt{}, dberror.MapError(err)
	}
	return IterateReceipt(stmt.QueryRowContext(ctx, params...))
}

func InsertReceipt(ctx context.Context, txn *sql.Tx, records []*Receipt) error {
	records = filter.OmitNil[Receipt](records)
	if len(records) == 0 {
		return nil
	}
	sq := squirrel.Insert(ReceiptTableName).Columns(ReceiptColumnsWOMagics...)
	for _, r := range records {
		if r == nil {
			continue
		}
		sq = sq.Values(r.Values()...)
	}
	query, params, err := sq.ToSql()
	if err != nil {
		return err
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return dberror.MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return dberror.MapError(err)
	}
	return nil
}

func UpdateReceipt(ctx context.Context, txn *sql.Tx, record Receipt) error {
	sql, params, err := squirrel.Update(ReceiptTableName).SetMap(record.SetMap()).
		Where(squirrel.Eq{
			"receipt_id": record.ReceiptID,
		}).
		ToSql()
	if err != nil {
		return err
	}
	stmt, err := txn.PrepareContext(ctx, sql)
	if err != nil {
		return dberror.MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return dberror.MapError(err)
	}
	return nil
}

func UpsertReceipt(ctx context.Context, txn *sql.Tx, record Receipt) error {
	updateSQL, params, err := squirrel.Update(ReceiptTableName).SetMap(record.SetMap()).ToSql()
	if err != nil {
		return err
	}
	updateSQL = strings.TrimPrefix(updateSQL, "UPDATE "+ReceiptTableName+" SET ")
	query, params, err := squirrel.Insert(ReceiptTableName).Columns(ReceiptColumnsWOMagics...).Values(record.Values()...).SuffixExpr(squirrel.Expr("ON DUPLICATE KEY UPDATE "+updateSQL, params...)).ToSql()
	if err != nil {
		return err
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return dberror.MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return dberror.MapError(err)
	}
	return nil
}

func DeleteReceiptByTotalPrice(ctx context.Context, txn *sql.Tx, total_price float32) error {
	query, params, err := squirrel.
		Delete(ReceiptTableName).
		Where(squirrel.Eq{
			"total_price": total_price,
		}).
		ToSql()
	if err != nil {
		return dberror.MapError(err)
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return dberror.MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return dberror.MapError(err)
	}
	return nil
}

func DeleteReceiptByPurchaseDate(ctx context.Context, txn *sql.Tx, purchase_date *time.Time) error {
	query, params, err := squirrel.
		Delete(ReceiptTableName).
		Where(squirrel.Eq{
			"purchase_date": purchase_date,
		}).
		ToSql()
	if err != nil {
		return dberror.MapError(err)
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return dberror.MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return dberror.MapError(err)
	}
	return nil
}

func DeleteOneReceiptByReceiptID(ctx context.Context, txn *sql.Tx, receipt_id int) error {
	query, params, err := squirrel.
		Delete(ReceiptTableName).
		Where(squirrel.Eq{
			"receipt_id": receipt_id,
		}).
		ToSql()
	if err != nil {
		return dberror.MapError(err)
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return dberror.MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return dberror.MapError(err)
	}
	return nil
}
