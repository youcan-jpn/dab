// Code generated by "script/dbgen". DO NOT EDIT.
package daocore

import (
	"context"
	"database/sql"
	"strings"

	"github.com/Masterminds/squirrel"

	"github.com/youcan-jpn/dab/backend/src/dberror"
	"github.com/youcan-jpn/dab/backend/src/util/filter"
)

const CategoryTableName = "categories"

var CategoryAllColumns = []string{
	"category_id",
	"category_name",
}

var CategoryColumnsWOMagics = []string{
	"category_id",
	"category_name",
}

var CategoryPrimaryKeyColumns = []string{
	"category_id",
}

type Category struct {
	CategoryID   int
	CategoryName string
}

func (t *Category) Values() []interface{} {
	return []interface{}{
		t.CategoryID,
		t.CategoryName,
	}
}

func (t *Category) SetMap() map[string]interface{} {
	return map[string]interface{}{
		"category_id":   t.CategoryID,
		"category_name": t.CategoryName,
	}
}

func (t *Category) Ptrs() []interface{} {
	return []interface{}{
		&t.CategoryID,
		&t.CategoryName,
	}
}

func IterateCategory(sc interface{ Scan(...interface{}) error }) (Category, error) {
	t := Category{}
	if err := sc.Scan(t.Ptrs()...); err != nil {
		return Category{}, dberror.MapError(err)
	}
	return t, nil
}

func SelectCategoryByCategoryName(ctx context.Context, txn *sql.Tx, category_name *string) ([]*Category, error) {
	eq := squirrel.Eq{}
	if category_name != nil {
		eq["category_name"] = *category_name
	}
	query, params, err := squirrel.
		Select(CategoryAllColumns...).
		From(CategoryTableName).
		Where(eq).
		ToSql()
	if err != nil {
		return nil, dberror.MapError(err)
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return nil, dberror.MapError(err)
	}
	rows, err := stmt.QueryContext(ctx, params...)
	if err != nil {
		return nil, dberror.MapError(err)
	}
	res := make([]*Category, 0)
	for rows.Next() {
		t, err := IterateCategory(rows)
		if err != nil {
			return nil, dberror.MapError(err)
		}
		res = append(res, &t)
	}
	return res, nil
}

func SelectOneCategoryByCategoryID(ctx context.Context, txn *sql.Tx, category_id *int) (Category, error) {
	eq := squirrel.Eq{}
	if category_id != nil {
		eq["category_id"] = *category_id
	}
	query, params, err := squirrel.
		Select(CategoryAllColumns...).
		From(CategoryTableName).
		Where(eq).
		ToSql()
	if err != nil {
		return Category{}, dberror.MapError(err)
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return Category{}, dberror.MapError(err)
	}
	return IterateCategory(stmt.QueryRowContext(ctx, params...))
}

func InsertCategory(ctx context.Context, txn *sql.Tx, records []*Category) error {
	records = filter.OmitNil[Category](records)
	if len(records) == 0 {
		return nil
	}
	sq := squirrel.Insert(CategoryTableName).Columns(CategoryColumnsWOMagics...)
	for _, r := range records {
		if r == nil {
			continue
		}
		sq = sq.Values(r.Values()...)
	}
	query, params, err := sq.ToSql()
	if err != nil {
		return err
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return dberror.MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return dberror.MapError(err)
	}
	return nil
}

func UpdateCategory(ctx context.Context, txn *sql.Tx, record Category) error {
	sql, params, err := squirrel.Update(CategoryTableName).SetMap(record.SetMap()).
		Where(squirrel.Eq{
			"category_id": record.CategoryID,
		}).
		ToSql()
	if err != nil {
		return err
	}
	stmt, err := txn.PrepareContext(ctx, sql)
	if err != nil {
		return dberror.MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return dberror.MapError(err)
	}
	return nil
}

func UpsertCategory(ctx context.Context, txn *sql.Tx, record Category) error {
	updateSQL, params, err := squirrel.Update(CategoryTableName).SetMap(record.SetMap()).ToSql()
	if err != nil {
		return err
	}
	updateSQL = strings.TrimPrefix(updateSQL, "UPDATE "+CategoryTableName+" SET ")
	query, params, err := squirrel.Insert(CategoryTableName).Columns(CategoryColumnsWOMagics...).Values(record.Values()...).SuffixExpr(squirrel.Expr("ON DUPLICATE KEY UPDATE "+updateSQL, params...)).ToSql()
	if err != nil {
		return err
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return dberror.MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return dberror.MapError(err)
	}
	return nil
}

func DeleteCategoryByCategoryName(ctx context.Context, txn *sql.Tx, category_name string) error {
	query, params, err := squirrel.
		Delete(CategoryTableName).
		Where(squirrel.Eq{
			"category_name": category_name,
		}).
		ToSql()
	if err != nil {
		return dberror.MapError(err)
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return dberror.MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return dberror.MapError(err)
	}
	return nil
}

func DeleteOneCategoryByCategoryID(ctx context.Context, txn *sql.Tx, category_id int) error {
	query, params, err := squirrel.
		Delete(CategoryTableName).
		Where(squirrel.Eq{
			"category_id": category_id,
		}).
		ToSql()
	if err != nil {
		return dberror.MapError(err)
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return dberror.MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return dberror.MapError(err)
	}
	return nil
}
