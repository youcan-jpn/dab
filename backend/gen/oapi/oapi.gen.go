// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Currencies defines model for currencies.
type Currencies = []Currency

// Currency defines model for currency.
type Currency struct {
	// CreatedAt 時刻あり日付
	CreatedAt *Timestamp `json:"created_at,omitempty"`

	// CurrencyId 通貨ID
	CurrencyId *CurrencyId `json:"currency_id,omitempty"`

	// CurrencyName 通貨名
	CurrencyName *CurrencyName `json:"currency_name,omitempty"`

	// InYen 金額
	InYen *InYen `json:"in_yen,omitempty"`

	// ModifiedAt 時刻あり日付
	ModifiedAt *Timestamp `json:"modified_at,omitempty"`
}

// CurrencyId 通貨ID
type CurrencyId = int

// CurrencyName 通貨名
type CurrencyName = string

// Date 時刻なし日付
type Date struct {
	// Day 日
	Day *Day `json:"day,omitempty"`

	// Month 月
	Month *Month `json:"month,omitempty"`

	// Year 年
	Year *Year `json:"year,omitempty"`
}

// Day 日
type Day = int

// InYen 金額
type InYen = Price

// Month 月
type Month = int

// Price 金額
type Price = int

// Product 商品リストの1要素
type Product struct {
	// Price 金額
	Price *Price `json:"price,omitempty"`

	// ProductName 商品名
	ProductName *ProductName `json:"product_name,omitempty"`
}

// ProductName 商品名
type ProductName = string

// Products defines model for products.
type Products = []Product

// Receipt レシート一覧の1要素
type Receipt struct {
	// CurrencyId 通貨ID
	CurrencyId *CurrencyId `json:"currency_id,omitempty"`

	// CurrencyName 通貨名
	CurrencyName *CurrencyName `json:"currency_name,omitempty"`
	Products     *Products     `json:"products,omitempty"`

	// PurchaseDate 時刻なし日付
	PurchaseDate *Date `json:"purchase_date,omitempty"`

	// ReceiptId レシートID
	ReceiptId *ReceiptId `json:"receipt_id,omitempty"`

	// ShopId 店ID
	ShopId *ShopId `json:"shop_id,omitempty"`

	// ShopName 店名
	ShopName *ShopName `json:"shop_name,omitempty"`

	// TotalPrice 金額
	TotalPrice *Price `json:"total_price,omitempty"`
}

// ReceiptId レシートID
type ReceiptId = int

// Receipts defines model for receipts.
type Receipts struct {
	Receipts *[]Receipt `json:"receipts,omitempty"`
}

// Shop 店情報
type Shop struct {
	// CreatedAt 時刻あり日付
	CreatedAt *Timestamp `json:"created_at,omitempty"`

	// ModifiedAt 時刻あり日付
	ModifiedAt *Timestamp `json:"modified_at,omitempty"`

	// ShopId 店ID
	ShopId *ShopId `json:"shop_id,omitempty"`

	// ShopName 店名
	ShopName *ShopName `json:"shop_name,omitempty"`
}

// ShopId 店ID
type ShopId = int

// ShopName 店名
type ShopName = string

// Shops defines model for shops.
type Shops struct {
	Shops *[]Shop `json:"shops,omitempty"`
}

// Timestamp 時刻あり日付
type Timestamp = string

// Year 年
type Year = int

// CurrencyListRes defines model for CurrencyListRes.
type CurrencyListRes = Currencies

// NewOrUpdatedCurrencyRes defines model for NewOrUpdatedCurrencyRes.
type NewOrUpdatedCurrencyRes = Currency

// NewOrUpdatedShopRes 店情報
type NewOrUpdatedShopRes = Shop

// ReceiptListRes defines model for ReceiptListRes.
type ReceiptListRes = Receipts

// ReceiptRes レシート一覧の1要素
type ReceiptRes = Receipt

// ShopListRes defines model for ShopListRes.
type ShopListRes = Shops

// NewOrUpdatedCurrency defines model for NewOrUpdatedCurrency.
type NewOrUpdatedCurrency struct {
	// CurrencyName 通貨ID
	CurrencyName *CurrencyId `json:"currency_name,omitempty"`

	// InYen 金額
	InYen *InYen `json:"in_yen,omitempty"`
}

// NewOrUpdatedReceipt defines model for NewOrUpdatedReceipt.
type NewOrUpdatedReceipt struct {
	// CurrencyId 通貨ID
	CurrencyId *CurrencyId `json:"currency_id,omitempty"`
	Products   *Products   `json:"products,omitempty"`

	// PurchaseDate 時刻なし日付
	PurchaseDate *Date `json:"purchase_date,omitempty"`

	// ShopId 店ID
	ShopId *ShopId `json:"shop_id,omitempty"`
}

// NewOrUpdatedShop defines model for NewOrUpdatedShop.
type NewOrUpdatedShop struct {
	// ShopName 店名
	ShopName *ShopName `json:"shop_name,omitempty"`
}

// ReceiptConditions defines model for ReceiptConditions.
type ReceiptConditions struct {
	// CurrencyId 通貨ID
	CurrencyId *CurrencyId `json:"currency_id,omitempty"`

	// MaxPrice 金額
	MaxPrice *Price `json:"max_price,omitempty"`

	// MinPrice 金額
	MinPrice *Price `json:"min_price,omitempty"`

	// PurchasedSince 時刻なし日付
	PurchasedSince *Date `json:"purchased_since,omitempty"`

	// PurchasedUntil 時刻なし日付
	PurchasedUntil *Date `json:"purchased_until,omitempty"`

	// ShopId 店ID
	ShopId *ShopId `json:"shop_id,omitempty"`
}

// PostCurrenciesJSONBody defines parameters for PostCurrencies.
type PostCurrenciesJSONBody struct {
	// CurrencyName 通貨ID
	CurrencyName *CurrencyId `json:"currency_name,omitempty"`

	// InYen 金額
	InYen *InYen `json:"in_yen,omitempty"`
}

// PatchCurrenciesCurrencyIdJSONBody defines parameters for PatchCurrenciesCurrencyId.
type PatchCurrenciesCurrencyIdJSONBody struct {
	// CurrencyName 通貨ID
	CurrencyName *CurrencyId `json:"currency_name,omitempty"`

	// InYen 金額
	InYen *InYen `json:"in_yen,omitempty"`
}

// PostReceiptsJSONBody defines parameters for PostReceipts.
type PostReceiptsJSONBody struct {
	// CurrencyId 通貨ID
	CurrencyId *CurrencyId `json:"currency_id,omitempty"`
	Products   *Products   `json:"products,omitempty"`

	// PurchaseDate 時刻なし日付
	PurchaseDate *Date `json:"purchase_date,omitempty"`

	// ShopId 店ID
	ShopId *ShopId `json:"shop_id,omitempty"`
}

// PostReceiptsSearchJSONBody defines parameters for PostReceiptsSearch.
type PostReceiptsSearchJSONBody struct {
	// CurrencyId 通貨ID
	CurrencyId *CurrencyId `json:"currency_id,omitempty"`

	// MaxPrice 金額
	MaxPrice *Price `json:"max_price,omitempty"`

	// MinPrice 金額
	MinPrice *Price `json:"min_price,omitempty"`

	// PurchasedSince 時刻なし日付
	PurchasedSince *Date `json:"purchased_since,omitempty"`

	// PurchasedUntil 時刻なし日付
	PurchasedUntil *Date `json:"purchased_until,omitempty"`

	// ShopId 店ID
	ShopId *ShopId `json:"shop_id,omitempty"`
}

// PatchReceiptsReceiptIdJSONBody defines parameters for PatchReceiptsReceiptId.
type PatchReceiptsReceiptIdJSONBody struct {
	// CurrencyId 通貨ID
	CurrencyId *CurrencyId `json:"currency_id,omitempty"`
	Products   *Products   `json:"products,omitempty"`

	// PurchaseDate 時刻なし日付
	PurchaseDate *Date `json:"purchase_date,omitempty"`

	// ShopId 店ID
	ShopId *ShopId `json:"shop_id,omitempty"`
}

// PostShopsJSONBody defines parameters for PostShops.
type PostShopsJSONBody struct {
	// ShopName 店名
	ShopName *ShopName `json:"shop_name,omitempty"`
}

// PatchShopsShopIdJSONBody defines parameters for PatchShopsShopId.
type PatchShopsShopIdJSONBody struct {
	// ShopName 店名
	ShopName *ShopName `json:"shop_name,omitempty"`
}

// PostCurrenciesJSONRequestBody defines body for PostCurrencies for application/json ContentType.
type PostCurrenciesJSONRequestBody PostCurrenciesJSONBody

// PatchCurrenciesCurrencyIdJSONRequestBody defines body for PatchCurrenciesCurrencyId for application/json ContentType.
type PatchCurrenciesCurrencyIdJSONRequestBody PatchCurrenciesCurrencyIdJSONBody

// PostReceiptsJSONRequestBody defines body for PostReceipts for application/json ContentType.
type PostReceiptsJSONRequestBody PostReceiptsJSONBody

// PostReceiptsSearchJSONRequestBody defines body for PostReceiptsSearch for application/json ContentType.
type PostReceiptsSearchJSONRequestBody PostReceiptsSearchJSONBody

// PatchReceiptsReceiptIdJSONRequestBody defines body for PatchReceiptsReceiptId for application/json ContentType.
type PatchReceiptsReceiptIdJSONRequestBody PatchReceiptsReceiptIdJSONBody

// PostShopsJSONRequestBody defines body for PostShops for application/json ContentType.
type PostShopsJSONRequestBody PostShopsJSONBody

// PatchShopsShopIdJSONRequestBody defines body for PatchShopsShopId for application/json ContentType.
type PatchShopsShopIdJSONRequestBody PatchShopsShopIdJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCurrencies request
	GetCurrencies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCurrencies request with any body
	PostCurrenciesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCurrencies(ctx context.Context, body PostCurrenciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchCurrenciesCurrencyId request with any body
	PatchCurrenciesCurrencyIdWithBody(ctx context.Context, currencyId CurrencyId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchCurrenciesCurrencyId(ctx context.Context, currencyId CurrencyId, body PatchCurrenciesCurrencyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReceipts request with any body
	PostReceiptsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostReceipts(ctx context.Context, body PostReceiptsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReceiptsSearch request with any body
	PostReceiptsSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostReceiptsSearch(ctx context.Context, body PostReceiptsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteReceiptsReceiptId request
	DeleteReceiptsReceiptId(ctx context.Context, receiptId ReceiptId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReceiptsReceiptId request
	GetReceiptsReceiptId(ctx context.Context, receiptId ReceiptId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchReceiptsReceiptId request with any body
	PatchReceiptsReceiptIdWithBody(ctx context.Context, receiptId ReceiptId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchReceiptsReceiptId(ctx context.Context, receiptId ReceiptId, body PatchReceiptsReceiptIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShops request
	GetShops(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostShops request with any body
	PostShopsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostShops(ctx context.Context, body PostShopsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchShopsShopId request with any body
	PatchShopsShopIdWithBody(ctx context.Context, shopId ShopId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchShopsShopId(ctx context.Context, shopId ShopId, body PatchShopsShopIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetCurrencies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCurrenciesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCurrenciesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCurrenciesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCurrencies(ctx context.Context, body PostCurrenciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCurrenciesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchCurrenciesCurrencyIdWithBody(ctx context.Context, currencyId CurrencyId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchCurrenciesCurrencyIdRequestWithBody(c.Server, currencyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchCurrenciesCurrencyId(ctx context.Context, currencyId CurrencyId, body PatchCurrenciesCurrencyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchCurrenciesCurrencyIdRequest(c.Server, currencyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReceiptsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReceiptsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReceipts(ctx context.Context, body PostReceiptsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReceiptsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReceiptsSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReceiptsSearchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReceiptsSearch(ctx context.Context, body PostReceiptsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReceiptsSearchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteReceiptsReceiptId(ctx context.Context, receiptId ReceiptId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteReceiptsReceiptIdRequest(c.Server, receiptId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReceiptsReceiptId(ctx context.Context, receiptId ReceiptId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReceiptsReceiptIdRequest(c.Server, receiptId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchReceiptsReceiptIdWithBody(ctx context.Context, receiptId ReceiptId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchReceiptsReceiptIdRequestWithBody(c.Server, receiptId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchReceiptsReceiptId(ctx context.Context, receiptId ReceiptId, body PatchReceiptsReceiptIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchReceiptsReceiptIdRequest(c.Server, receiptId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShops(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShopsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostShopsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostShopsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostShops(ctx context.Context, body PostShopsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostShopsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchShopsShopIdWithBody(ctx context.Context, shopId ShopId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchShopsShopIdRequestWithBody(c.Server, shopId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchShopsShopId(ctx context.Context, shopId ShopId, body PatchShopsShopIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchShopsShopIdRequest(c.Server, shopId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetCurrenciesRequest generates requests for GetCurrencies
func NewGetCurrenciesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/currencies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCurrenciesRequest calls the generic PostCurrencies builder with application/json body
func NewPostCurrenciesRequest(server string, body PostCurrenciesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCurrenciesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCurrenciesRequestWithBody generates requests for PostCurrencies with any type of body
func NewPostCurrenciesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/currencies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchCurrenciesCurrencyIdRequest calls the generic PatchCurrenciesCurrencyId builder with application/json body
func NewPatchCurrenciesCurrencyIdRequest(server string, currencyId CurrencyId, body PatchCurrenciesCurrencyIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchCurrenciesCurrencyIdRequestWithBody(server, currencyId, "application/json", bodyReader)
}

// NewPatchCurrenciesCurrencyIdRequestWithBody generates requests for PatchCurrenciesCurrencyId with any type of body
func NewPatchCurrenciesCurrencyIdRequestWithBody(server string, currencyId CurrencyId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "currency_id", runtime.ParamLocationPath, currencyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/currencies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostReceiptsRequest calls the generic PostReceipts builder with application/json body
func NewPostReceiptsRequest(server string, body PostReceiptsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostReceiptsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostReceiptsRequestWithBody generates requests for PostReceipts with any type of body
func NewPostReceiptsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/receipts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostReceiptsSearchRequest calls the generic PostReceiptsSearch builder with application/json body
func NewPostReceiptsSearchRequest(server string, body PostReceiptsSearchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostReceiptsSearchRequestWithBody(server, "application/json", bodyReader)
}

// NewPostReceiptsSearchRequestWithBody generates requests for PostReceiptsSearch with any type of body
func NewPostReceiptsSearchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/receipts/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteReceiptsReceiptIdRequest generates requests for DeleteReceiptsReceiptId
func NewDeleteReceiptsReceiptIdRequest(server string, receiptId ReceiptId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "receipt_id", runtime.ParamLocationPath, receiptId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/receipts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReceiptsReceiptIdRequest generates requests for GetReceiptsReceiptId
func NewGetReceiptsReceiptIdRequest(server string, receiptId ReceiptId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "receipt_id", runtime.ParamLocationPath, receiptId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/receipts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchReceiptsReceiptIdRequest calls the generic PatchReceiptsReceiptId builder with application/json body
func NewPatchReceiptsReceiptIdRequest(server string, receiptId ReceiptId, body PatchReceiptsReceiptIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchReceiptsReceiptIdRequestWithBody(server, receiptId, "application/json", bodyReader)
}

// NewPatchReceiptsReceiptIdRequestWithBody generates requests for PatchReceiptsReceiptId with any type of body
func NewPatchReceiptsReceiptIdRequestWithBody(server string, receiptId ReceiptId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "receipt_id", runtime.ParamLocationPath, receiptId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/receipts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetShopsRequest generates requests for GetShops
func NewGetShopsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shops")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostShopsRequest calls the generic PostShops builder with application/json body
func NewPostShopsRequest(server string, body PostShopsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostShopsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostShopsRequestWithBody generates requests for PostShops with any type of body
func NewPostShopsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shops")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchShopsShopIdRequest calls the generic PatchShopsShopId builder with application/json body
func NewPatchShopsShopIdRequest(server string, shopId ShopId, body PatchShopsShopIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchShopsShopIdRequestWithBody(server, shopId, "application/json", bodyReader)
}

// NewPatchShopsShopIdRequestWithBody generates requests for PatchShopsShopId with any type of body
func NewPatchShopsShopIdRequestWithBody(server string, shopId ShopId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, shopId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shops/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCurrencies request
	GetCurrenciesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCurrenciesResponse, error)

	// PostCurrencies request with any body
	PostCurrenciesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCurrenciesResponse, error)

	PostCurrenciesWithResponse(ctx context.Context, body PostCurrenciesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCurrenciesResponse, error)

	// PatchCurrenciesCurrencyId request with any body
	PatchCurrenciesCurrencyIdWithBodyWithResponse(ctx context.Context, currencyId CurrencyId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchCurrenciesCurrencyIdResponse, error)

	PatchCurrenciesCurrencyIdWithResponse(ctx context.Context, currencyId CurrencyId, body PatchCurrenciesCurrencyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchCurrenciesCurrencyIdResponse, error)

	// PostReceipts request with any body
	PostReceiptsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReceiptsResponse, error)

	PostReceiptsWithResponse(ctx context.Context, body PostReceiptsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReceiptsResponse, error)

	// PostReceiptsSearch request with any body
	PostReceiptsSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReceiptsSearchResponse, error)

	PostReceiptsSearchWithResponse(ctx context.Context, body PostReceiptsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReceiptsSearchResponse, error)

	// DeleteReceiptsReceiptId request
	DeleteReceiptsReceiptIdWithResponse(ctx context.Context, receiptId ReceiptId, reqEditors ...RequestEditorFn) (*DeleteReceiptsReceiptIdResponse, error)

	// GetReceiptsReceiptId request
	GetReceiptsReceiptIdWithResponse(ctx context.Context, receiptId ReceiptId, reqEditors ...RequestEditorFn) (*GetReceiptsReceiptIdResponse, error)

	// PatchReceiptsReceiptId request with any body
	PatchReceiptsReceiptIdWithBodyWithResponse(ctx context.Context, receiptId ReceiptId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchReceiptsReceiptIdResponse, error)

	PatchReceiptsReceiptIdWithResponse(ctx context.Context, receiptId ReceiptId, body PatchReceiptsReceiptIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchReceiptsReceiptIdResponse, error)

	// GetShops request
	GetShopsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetShopsResponse, error)

	// PostShops request with any body
	PostShopsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostShopsResponse, error)

	PostShopsWithResponse(ctx context.Context, body PostShopsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostShopsResponse, error)

	// PatchShopsShopId request with any body
	PatchShopsShopIdWithBodyWithResponse(ctx context.Context, shopId ShopId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchShopsShopIdResponse, error)

	PatchShopsShopIdWithResponse(ctx context.Context, shopId ShopId, body PatchShopsShopIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchShopsShopIdResponse, error)
}

type GetCurrenciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Currencies
}

// Status returns HTTPResponse.Status
func (r GetCurrenciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCurrenciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCurrenciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Currency
}

// Status returns HTTPResponse.Status
func (r PostCurrenciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCurrenciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchCurrenciesCurrencyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Currency
}

// Status returns HTTPResponse.Status
func (r PatchCurrenciesCurrencyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchCurrenciesCurrencyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReceiptsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Receipt
}

// Status returns HTTPResponse.Status
func (r PostReceiptsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReceiptsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReceiptsSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Receipts
}

// Status returns HTTPResponse.Status
func (r PostReceiptsSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReceiptsSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteReceiptsReceiptIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteReceiptsReceiptIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteReceiptsReceiptIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReceiptsReceiptIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Receipt
}

// Status returns HTTPResponse.Status
func (r GetReceiptsReceiptIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReceiptsReceiptIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchReceiptsReceiptIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Receipt
}

// Status returns HTTPResponse.Status
func (r PatchReceiptsReceiptIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchReceiptsReceiptIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShopsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Shops
}

// Status returns HTTPResponse.Status
func (r GetShopsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShopsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostShopsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Shop
}

// Status returns HTTPResponse.Status
func (r PostShopsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostShopsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchShopsShopIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Shop
}

// Status returns HTTPResponse.Status
func (r PatchShopsShopIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchShopsShopIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCurrenciesWithResponse request returning *GetCurrenciesResponse
func (c *ClientWithResponses) GetCurrenciesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCurrenciesResponse, error) {
	rsp, err := c.GetCurrencies(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCurrenciesResponse(rsp)
}

// PostCurrenciesWithBodyWithResponse request with arbitrary body returning *PostCurrenciesResponse
func (c *ClientWithResponses) PostCurrenciesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCurrenciesResponse, error) {
	rsp, err := c.PostCurrenciesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCurrenciesResponse(rsp)
}

func (c *ClientWithResponses) PostCurrenciesWithResponse(ctx context.Context, body PostCurrenciesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCurrenciesResponse, error) {
	rsp, err := c.PostCurrencies(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCurrenciesResponse(rsp)
}

// PatchCurrenciesCurrencyIdWithBodyWithResponse request with arbitrary body returning *PatchCurrenciesCurrencyIdResponse
func (c *ClientWithResponses) PatchCurrenciesCurrencyIdWithBodyWithResponse(ctx context.Context, currencyId CurrencyId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchCurrenciesCurrencyIdResponse, error) {
	rsp, err := c.PatchCurrenciesCurrencyIdWithBody(ctx, currencyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchCurrenciesCurrencyIdResponse(rsp)
}

func (c *ClientWithResponses) PatchCurrenciesCurrencyIdWithResponse(ctx context.Context, currencyId CurrencyId, body PatchCurrenciesCurrencyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchCurrenciesCurrencyIdResponse, error) {
	rsp, err := c.PatchCurrenciesCurrencyId(ctx, currencyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchCurrenciesCurrencyIdResponse(rsp)
}

// PostReceiptsWithBodyWithResponse request with arbitrary body returning *PostReceiptsResponse
func (c *ClientWithResponses) PostReceiptsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReceiptsResponse, error) {
	rsp, err := c.PostReceiptsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReceiptsResponse(rsp)
}

func (c *ClientWithResponses) PostReceiptsWithResponse(ctx context.Context, body PostReceiptsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReceiptsResponse, error) {
	rsp, err := c.PostReceipts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReceiptsResponse(rsp)
}

// PostReceiptsSearchWithBodyWithResponse request with arbitrary body returning *PostReceiptsSearchResponse
func (c *ClientWithResponses) PostReceiptsSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReceiptsSearchResponse, error) {
	rsp, err := c.PostReceiptsSearchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReceiptsSearchResponse(rsp)
}

func (c *ClientWithResponses) PostReceiptsSearchWithResponse(ctx context.Context, body PostReceiptsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReceiptsSearchResponse, error) {
	rsp, err := c.PostReceiptsSearch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReceiptsSearchResponse(rsp)
}

// DeleteReceiptsReceiptIdWithResponse request returning *DeleteReceiptsReceiptIdResponse
func (c *ClientWithResponses) DeleteReceiptsReceiptIdWithResponse(ctx context.Context, receiptId ReceiptId, reqEditors ...RequestEditorFn) (*DeleteReceiptsReceiptIdResponse, error) {
	rsp, err := c.DeleteReceiptsReceiptId(ctx, receiptId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteReceiptsReceiptIdResponse(rsp)
}

// GetReceiptsReceiptIdWithResponse request returning *GetReceiptsReceiptIdResponse
func (c *ClientWithResponses) GetReceiptsReceiptIdWithResponse(ctx context.Context, receiptId ReceiptId, reqEditors ...RequestEditorFn) (*GetReceiptsReceiptIdResponse, error) {
	rsp, err := c.GetReceiptsReceiptId(ctx, receiptId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReceiptsReceiptIdResponse(rsp)
}

// PatchReceiptsReceiptIdWithBodyWithResponse request with arbitrary body returning *PatchReceiptsReceiptIdResponse
func (c *ClientWithResponses) PatchReceiptsReceiptIdWithBodyWithResponse(ctx context.Context, receiptId ReceiptId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchReceiptsReceiptIdResponse, error) {
	rsp, err := c.PatchReceiptsReceiptIdWithBody(ctx, receiptId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchReceiptsReceiptIdResponse(rsp)
}

func (c *ClientWithResponses) PatchReceiptsReceiptIdWithResponse(ctx context.Context, receiptId ReceiptId, body PatchReceiptsReceiptIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchReceiptsReceiptIdResponse, error) {
	rsp, err := c.PatchReceiptsReceiptId(ctx, receiptId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchReceiptsReceiptIdResponse(rsp)
}

// GetShopsWithResponse request returning *GetShopsResponse
func (c *ClientWithResponses) GetShopsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetShopsResponse, error) {
	rsp, err := c.GetShops(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShopsResponse(rsp)
}

// PostShopsWithBodyWithResponse request with arbitrary body returning *PostShopsResponse
func (c *ClientWithResponses) PostShopsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostShopsResponse, error) {
	rsp, err := c.PostShopsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostShopsResponse(rsp)
}

func (c *ClientWithResponses) PostShopsWithResponse(ctx context.Context, body PostShopsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostShopsResponse, error) {
	rsp, err := c.PostShops(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostShopsResponse(rsp)
}

// PatchShopsShopIdWithBodyWithResponse request with arbitrary body returning *PatchShopsShopIdResponse
func (c *ClientWithResponses) PatchShopsShopIdWithBodyWithResponse(ctx context.Context, shopId ShopId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchShopsShopIdResponse, error) {
	rsp, err := c.PatchShopsShopIdWithBody(ctx, shopId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchShopsShopIdResponse(rsp)
}

func (c *ClientWithResponses) PatchShopsShopIdWithResponse(ctx context.Context, shopId ShopId, body PatchShopsShopIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchShopsShopIdResponse, error) {
	rsp, err := c.PatchShopsShopId(ctx, shopId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchShopsShopIdResponse(rsp)
}

// ParseGetCurrenciesResponse parses an HTTP response from a GetCurrenciesWithResponse call
func ParseGetCurrenciesResponse(rsp *http.Response) (*GetCurrenciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCurrenciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Currencies
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCurrenciesResponse parses an HTTP response from a PostCurrenciesWithResponse call
func ParsePostCurrenciesResponse(rsp *http.Response) (*PostCurrenciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCurrenciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Currency
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchCurrenciesCurrencyIdResponse parses an HTTP response from a PatchCurrenciesCurrencyIdWithResponse call
func ParsePatchCurrenciesCurrencyIdResponse(rsp *http.Response) (*PatchCurrenciesCurrencyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchCurrenciesCurrencyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Currency
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostReceiptsResponse parses an HTTP response from a PostReceiptsWithResponse call
func ParsePostReceiptsResponse(rsp *http.Response) (*PostReceiptsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReceiptsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Receipt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostReceiptsSearchResponse parses an HTTP response from a PostReceiptsSearchWithResponse call
func ParsePostReceiptsSearchResponse(rsp *http.Response) (*PostReceiptsSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReceiptsSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Receipts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteReceiptsReceiptIdResponse parses an HTTP response from a DeleteReceiptsReceiptIdWithResponse call
func ParseDeleteReceiptsReceiptIdResponse(rsp *http.Response) (*DeleteReceiptsReceiptIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteReceiptsReceiptIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetReceiptsReceiptIdResponse parses an HTTP response from a GetReceiptsReceiptIdWithResponse call
func ParseGetReceiptsReceiptIdResponse(rsp *http.Response) (*GetReceiptsReceiptIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReceiptsReceiptIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Receipt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchReceiptsReceiptIdResponse parses an HTTP response from a PatchReceiptsReceiptIdWithResponse call
func ParsePatchReceiptsReceiptIdResponse(rsp *http.Response) (*PatchReceiptsReceiptIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchReceiptsReceiptIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Receipt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetShopsResponse parses an HTTP response from a GetShopsWithResponse call
func ParseGetShopsResponse(rsp *http.Response) (*GetShopsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShopsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Shops
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostShopsResponse parses an HTTP response from a PostShopsWithResponse call
func ParsePostShopsResponse(rsp *http.Response) (*PostShopsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostShopsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Shop
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchShopsShopIdResponse parses an HTTP response from a PatchShopsShopIdWithResponse call
func ParsePatchShopsShopIdResponse(rsp *http.Response) (*PatchShopsShopIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchShopsShopIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Shop
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 通貨情報を取得
	// (GET /currencies)
	GetCurrencies(ctx echo.Context) error
	// 通貨情報を登録
	// (POST /currencies)
	PostCurrencies(ctx echo.Context) error
	// 通貨情報を更新
	// (PATCH /currencies/{currency_id})
	PatchCurrenciesCurrencyId(ctx echo.Context, currencyId CurrencyId) error
	// 新しいレシートを登録
	// (POST /receipts)
	PostReceipts(ctx echo.Context) error
	// 条件を指定して該当するレシートを検索
	// (POST /receipts/search)
	PostReceiptsSearch(ctx echo.Context) error
	// レシートIDを指定して削除
	// (DELETE /receipts/{receipt_id})
	DeleteReceiptsReceiptId(ctx echo.Context, receiptId ReceiptId) error
	// レシートIDを指定して詳細を取得
	// (GET /receipts/{receipt_id})
	GetReceiptsReceiptId(ctx echo.Context, receiptId ReceiptId) error
	// レシートIDを指定して更新
	// (PATCH /receipts/{receipt_id})
	PatchReceiptsReceiptId(ctx echo.Context, receiptId ReceiptId) error
	// 店一覧を取得
	// (GET /shops)
	GetShops(ctx echo.Context) error
	// 新しい店名を登録
	// (POST /shops)
	PostShops(ctx echo.Context) error
	// 店名を更新
	// (PATCH /shops/{shop_id})
	PatchShopsShopId(ctx echo.Context, shopId ShopId) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCurrencies converts echo context to params.
func (w *ServerInterfaceWrapper) GetCurrencies(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCurrencies(ctx)
	return err
}

// PostCurrencies converts echo context to params.
func (w *ServerInterfaceWrapper) PostCurrencies(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCurrencies(ctx)
	return err
}

// PatchCurrenciesCurrencyId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchCurrenciesCurrencyId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "currency_id" -------------
	var currencyId CurrencyId

	err = runtime.BindStyledParameterWithLocation("simple", false, "currency_id", runtime.ParamLocationPath, ctx.Param("currency_id"), &currencyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchCurrenciesCurrencyId(ctx, currencyId)
	return err
}

// PostReceipts converts echo context to params.
func (w *ServerInterfaceWrapper) PostReceipts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostReceipts(ctx)
	return err
}

// PostReceiptsSearch converts echo context to params.
func (w *ServerInterfaceWrapper) PostReceiptsSearch(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostReceiptsSearch(ctx)
	return err
}

// DeleteReceiptsReceiptId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteReceiptsReceiptId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "receipt_id" -------------
	var receiptId ReceiptId

	err = runtime.BindStyledParameterWithLocation("simple", false, "receipt_id", runtime.ParamLocationPath, ctx.Param("receipt_id"), &receiptId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter receipt_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteReceiptsReceiptId(ctx, receiptId)
	return err
}

// GetReceiptsReceiptId converts echo context to params.
func (w *ServerInterfaceWrapper) GetReceiptsReceiptId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "receipt_id" -------------
	var receiptId ReceiptId

	err = runtime.BindStyledParameterWithLocation("simple", false, "receipt_id", runtime.ParamLocationPath, ctx.Param("receipt_id"), &receiptId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter receipt_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReceiptsReceiptId(ctx, receiptId)
	return err
}

// PatchReceiptsReceiptId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchReceiptsReceiptId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "receipt_id" -------------
	var receiptId ReceiptId

	err = runtime.BindStyledParameterWithLocation("simple", false, "receipt_id", runtime.ParamLocationPath, ctx.Param("receipt_id"), &receiptId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter receipt_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchReceiptsReceiptId(ctx, receiptId)
	return err
}

// GetShops converts echo context to params.
func (w *ServerInterfaceWrapper) GetShops(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetShops(ctx)
	return err
}

// PostShops converts echo context to params.
func (w *ServerInterfaceWrapper) PostShops(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostShops(ctx)
	return err
}

// PatchShopsShopId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchShopsShopId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shop_id" -------------
	var shopId ShopId

	err = runtime.BindStyledParameterWithLocation("simple", false, "shop_id", runtime.ParamLocationPath, ctx.Param("shop_id"), &shopId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shop_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchShopsShopId(ctx, shopId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/currencies", wrapper.GetCurrencies)
	router.POST(baseURL+"/currencies", wrapper.PostCurrencies)
	router.PATCH(baseURL+"/currencies/:currency_id", wrapper.PatchCurrenciesCurrencyId)
	router.POST(baseURL+"/receipts", wrapper.PostReceipts)
	router.POST(baseURL+"/receipts/search", wrapper.PostReceiptsSearch)
	router.DELETE(baseURL+"/receipts/:receipt_id", wrapper.DeleteReceiptsReceiptId)
	router.GET(baseURL+"/receipts/:receipt_id", wrapper.GetReceiptsReceiptId)
	router.PATCH(baseURL+"/receipts/:receipt_id", wrapper.PatchReceiptsReceiptId)
	router.GET(baseURL+"/shops", wrapper.GetShops)
	router.POST(baseURL+"/shops", wrapper.PostShops)
	router.PATCH(baseURL+"/shops/:shop_id", wrapper.PatchShopsShopId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RZb28URRj/Ks3oy7V7aHxz7xQS08QoafWVaZphd9pbsre7zsyBl8sm7J5KRQgKwlnE",
	"CAQqoCmIDUrrnw8z7PX6Lczs7P+dvdu7FqhvoEyfZ/Z5fs/v+Tf0gGa3HdtCFiWg2QMYfdpBhL5r6wYK",
	"Dz5AZz/EHzs6pEg/3sEYWVqXn2u2RZFF+Y/QcUxDg9SwLfU0sS1+RrQWakP+k4NtB2EaXadFV6xYsI34",
	"wesYrYImeE1N7VCFMlETYUMHrgIMa6WLrElKkZTrKoB2HQSawD51GmkUuPxIR0TDhsNtBU0wvP6YeQPm",
	"fb5/7sboyf1h/4vg1m9ACVEwMNJBk+IOcpUcCotIQ4ZDDwMEQ58SAgfbekcToRqnlshxnQ7WWpCgFW79",
	"JMVQxlUAadlODfNisbpojzYv723s7l98wrxrzL/IvJ9Y/1fm/8H6f7H++iTkl1q2cwDYQ2Pr8C4VnI5F",
	"wc4g+OaSzIuIM8dtSze4Fnkl7GnDz1YcbGhoMn24ENcwrCk1YrbpK8SwtNp8S9U6FjXMl0lTfogRcWyL",
	"CIDjMve+Qegimi5UNaLBwyhhUa4EFYgfW/QCrOlOzFTfD9l9mXmPhj9sh2SPcnecyTxXD9NcHsIDmBrs",
	"DFI7o2w87Phica00usMfbz/ffcr8K8Odc7zqeRvZwse8red/nhtt/pyx7gVYJjMsa8bowe9724+5DTx6",
	"hw0Pj6AUm2BnkAGAZ7XQyBS7qPQZFLVJfWInyQ4xhuG/tcwEU6iqGHHarkA66X5qtBGhsO1kL5y+GM82",
	"CYmuNO0spIC2rRurxrT+lctlyWNZEVs4ARJFw6JoDWGpxzJd0UAjZUKxYa1x3Xh2KWTVhh+s7zLvIfMG",
	"w8G957vfA6UQVx12JzeTroDIoq1JskLIVUAXQTxJOJSRghhZVfBmcE+KWxrrAmDnv92/fUmqkvhS+MLN",
	"dal40uJrfyAaMMs6wbUvg6se6z9k/jNR2Y6NNr297VulyEw5V4gP1sqWnKwU/+JtMh8qmJgdwWvVoxgq",
	"STnC6SpRXZVFYRwD5KuqQS9tGYlgquFfRnKG6VCZaUVQALUpNKeak2WczHtZzYeK6ppMH6XWlv1NLcYm",
	"40KRsTKzSbSUlXp6sk0fSqOdrYG9LA5UASMNZrAzqIhh7tMlpYqCJOYq6bZbP+RivK4T7xTdynbsM/9C",
	"0o5L9sads+Dfs20JJG7Y/lZtifzW09H99b3H/zL/DusPWP/h3nf33zm5wC8xqMlv0eGpN6BjAAWcQZgI",
	"tcZ8Y/4Yt8J2kMV/2QRvzTfmG5ymkLZCnNT80LmGQsZxbMOxd0EHTfAeosdTqcIC+WajUYV3IqcWt8xw",
	"8O202xB3C9sg868El68H/wy4b3CNgOYnIPPxZV5WbSIx8qRNilbGr3vdagMzD4Cq9PXPncXdqnV2rNti",
	"raty21WyoVJ7mebmhvkAqdaSoMKP04tiYxb0kAMYthFFmH+tBwxOGc4LoACRlrlmW3zoUaZcvcWTxPL/",
	"Ly5iuR4Xl1w3qiTnYix1QAgW04Y1PQKZfTvvdPKul1vVJaxM3Mj7rhIEsWDgZAiWhOwMQJTfFg8Cg7wc",
	"pc8XF88HWzdCWDZHD54Ef19l3gbzvy5ANLx7c2/7Tg2IeunU44oibyIxGOahOhGex7dEf9dM2cxgNWvG",
	"ZudKkbBlePP96aMWmsOI2B2sobmzkMwJz/Q50tE0RAha7Zhmd76Ac37OK+AdfHVhf+OuHFSlsk0dacxm",
	"zMyxMIlXLFnTzOE1rjscIcyOXFUci32pMRTyPhlKq9i6FArMYnD2yTJvcbAziHZoCSfEB8fPUKlRB4jG",
	"UjRhH6xFx8/qFZ1KbAmyHhX7mURB7UULysRZKVTlf9TMg3jxmTUJ0v+tWT7CmCdQlzifQM3lET4TQ5Vv",
	"EKs2ntPRGWTaThtZFCigg03QBC1Knaaq9lo2oW6z59iYumq0xkBswFOmcKMV0VVHq7BjUtAEpq1BMzwO",
	"2YwLv3670WjwjWo5sXTcKwPztqJxz/uFr1j+I+bvMv+ZaPdpsJMEd5We9F2/1i0CsvIVYu6se0tmCnWX",
	"3f8CAAD//3ssTS/bIAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
