/**
 * Generated by orval v6.12.1 üç∫
 * Do not edit manually.
 * dab-api
 * ÂÆ∂Ë®àÁ∞ø„Ç¢„Éó„É™Áî®API
 * OpenAPI spec version: 0.0.1
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from "axios";
import { useQuery, useMutation } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type {
  ReceiptResResponse,
  NewOrUpdatedReceiptBody,
  ReceiptListResResponse,
  ReceiptConditionsBody,
  ReceiptId,
} from "../../models";

/**
 * @summary Êñ∞„Åó„ÅÑ„É¨„Ç∑„Éº„Éà„ÇíÁôªÈå≤
 */
export const postReceipts = (
  newOrUpdatedReceiptBody: NewOrUpdatedReceiptBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ReceiptResResponse>> => {
  return axios.post(`/receipts`, newOrUpdatedReceiptBody, options);
};

export type PostReceiptsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postReceipts>>
>;
export type PostReceiptsMutationBody = NewOrUpdatedReceiptBody;
export type PostReceiptsMutationError = AxiosError<unknown>;

export const usePostReceipts = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postReceipts>>,
    TError,
    { data: NewOrUpdatedReceiptBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postReceipts>>,
    { data: NewOrUpdatedReceiptBody }
  > = (props) => {
    const { data } = props ?? {};

    return postReceipts(data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof postReceipts>>,
    TError,
    { data: NewOrUpdatedReceiptBody },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary Êù°‰ª∂„ÇíÊåáÂÆö„Åó„Å¶Ë©≤ÂΩì„Åô„Çã„É¨„Ç∑„Éº„Éà„ÇíÊ§úÁ¥¢
 */
export const postReceiptsSearch = (
  receiptConditionsBody: ReceiptConditionsBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ReceiptListResResponse>> => {
  return axios.post(`/receipts/search`, receiptConditionsBody, options);
};

export type PostReceiptsSearchMutationResult = NonNullable<
  Awaited<ReturnType<typeof postReceiptsSearch>>
>;
export type PostReceiptsSearchMutationBody = ReceiptConditionsBody;
export type PostReceiptsSearchMutationError = AxiosError<unknown>;

export const usePostReceiptsSearch = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postReceiptsSearch>>,
    TError,
    { data: ReceiptConditionsBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postReceiptsSearch>>,
    { data: ReceiptConditionsBody }
  > = (props) => {
    const { data } = props ?? {};

    return postReceiptsSearch(data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof postReceiptsSearch>>,
    TError,
    { data: ReceiptConditionsBody },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary „É¨„Ç∑„Éº„ÉàID„ÇíÊåáÂÆö„Åó„Å¶Ë©≥Á¥∞„ÇíÂèñÂæó
 */
export const getReceiptsReceiptId = (
  receiptId: ReceiptId,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ReceiptResResponse>> => {
  return axios.get(`/receipts/${receiptId}`, options);
};

export const getGetReceiptsReceiptIdQueryKey = (receiptId: ReceiptId) => [
  `/receipts/${receiptId}`,
];

export type GetReceiptsReceiptIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getReceiptsReceiptId>>
>;
export type GetReceiptsReceiptIdQueryError = AxiosError<unknown>;

export const useGetReceiptsReceiptId = <
  TData = Awaited<ReturnType<typeof getReceiptsReceiptId>>,
  TError = AxiosError<unknown>
>(
  receiptId: ReceiptId,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getReceiptsReceiptId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetReceiptsReceiptIdQueryKey(receiptId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getReceiptsReceiptId>>
  > = ({ signal }) =>
    getReceiptsReceiptId(receiptId, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof getReceiptsReceiptId>>,
    TError,
    TData
  >({
    queryKey,
    queryFn,
    enabled: !!receiptId,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary „É¨„Ç∑„Éº„ÉàID„ÇíÊåáÂÆö„Åó„Å¶Êõ¥Êñ∞
 */
export const patchReceiptsReceiptId = (
  receiptId: ReceiptId,
  newOrUpdatedReceiptBody: NewOrUpdatedReceiptBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ReceiptResResponse>> => {
  return axios.patch(
    `/receipts/${receiptId}`,
    newOrUpdatedReceiptBody,
    options
  );
};

export type PatchReceiptsReceiptIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchReceiptsReceiptId>>
>;
export type PatchReceiptsReceiptIdMutationBody = NewOrUpdatedReceiptBody;
export type PatchReceiptsReceiptIdMutationError = AxiosError<unknown>;

export const usePatchReceiptsReceiptId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchReceiptsReceiptId>>,
    TError,
    { receiptId: ReceiptId; data: NewOrUpdatedReceiptBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchReceiptsReceiptId>>,
    { receiptId: ReceiptId; data: NewOrUpdatedReceiptBody }
  > = (props) => {
    const { receiptId, data } = props ?? {};

    return patchReceiptsReceiptId(receiptId, data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof patchReceiptsReceiptId>>,
    TError,
    { receiptId: ReceiptId; data: NewOrUpdatedReceiptBody },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary „É¨„Ç∑„Éº„ÉàID„ÇíÊåáÂÆö„Åó„Å¶ÂâäÈô§
 */
export const deleteReceiptsReceiptId = (
  receiptId: ReceiptId,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.delete(`/receipts/${receiptId}`, options);
};

export type DeleteReceiptsReceiptIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteReceiptsReceiptId>>
>;

export type DeleteReceiptsReceiptIdMutationError = AxiosError<unknown>;

export const useDeleteReceiptsReceiptId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteReceiptsReceiptId>>,
    TError,
    { receiptId: ReceiptId },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteReceiptsReceiptId>>,
    { receiptId: ReceiptId }
  > = (props) => {
    const { receiptId } = props ?? {};

    return deleteReceiptsReceiptId(receiptId, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteReceiptsReceiptId>>,
    TError,
    { receiptId: ReceiptId },
    TContext
  >(mutationFn, mutationOptions);
};
