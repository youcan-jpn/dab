/**
 * Generated by orval v6.12.1 🍺
 * Do not edit manually.
 * dab-api
 * 家計簿アプリ用API
 * OpenAPI spec version: 0.0.1
 */
import { rest } from "msw";
import { faker } from "@faker-js/faker";

export const getPostReceiptsMock = () => ({
  receipt_id: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    undefined,
  ]),
  shop_id: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    undefined,
  ]),
  shop_name: faker.helpers.arrayElement([faker.random.word(), undefined]),
  currency_id: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    undefined,
  ]),
  currency_name: faker.helpers.arrayElement([faker.random.word(), undefined]),
  category_id: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    undefined,
  ]),
  category_name: faker.helpers.arrayElement([faker.random.word(), undefined]),
  purchase_date: faker.helpers.arrayElement([
    {
      year: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
      ]),
      month: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
      ]),
      day: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
      ]),
    },
    undefined,
  ]),
  total_price: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    undefined,
  ]),
  products: faker.helpers.arrayElement([
    Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      product_id: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
      ]),
      product_name: faker.helpers.arrayElement([
        faker.random.word(),
        undefined,
      ]),
      price: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
      ]),
    })),
    undefined,
  ]),
});

export const getPostReceiptsSearchMock = () => ({
  receipts: faker.helpers.arrayElement([
    Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      receipt_id: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
      ]),
      shop_id: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
      ]),
      shop_name: faker.helpers.arrayElement([faker.random.word(), undefined]),
      currency_id: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
      ]),
      currency_name: faker.helpers.arrayElement([
        faker.random.word(),
        undefined,
      ]),
      category_id: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
      ]),
      category_name: faker.helpers.arrayElement([
        faker.random.word(),
        undefined,
      ]),
      purchase_date: faker.helpers.arrayElement([
        {
          year: faker.helpers.arrayElement([
            faker.datatype.number({ min: undefined, max: undefined }),
            undefined,
          ]),
          month: faker.helpers.arrayElement([
            faker.datatype.number({ min: undefined, max: undefined }),
            undefined,
          ]),
          day: faker.helpers.arrayElement([
            faker.datatype.number({ min: undefined, max: undefined }),
            undefined,
          ]),
        },
        undefined,
      ]),
      total_price: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
      ]),
      products: faker.helpers.arrayElement([
        Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          product_id: faker.helpers.arrayElement([
            faker.datatype.number({ min: undefined, max: undefined }),
            undefined,
          ]),
          product_name: faker.helpers.arrayElement([
            faker.random.word(),
            undefined,
          ]),
          price: faker.helpers.arrayElement([
            faker.datatype.number({ min: undefined, max: undefined }),
            undefined,
          ]),
        })),
        undefined,
      ]),
    })),
    undefined,
  ]),
});

export const getGetReceiptsReceiptIdMock = () => ({
  receipt_id: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    undefined,
  ]),
  shop_id: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    undefined,
  ]),
  shop_name: faker.helpers.arrayElement([faker.random.word(), undefined]),
  currency_id: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    undefined,
  ]),
  currency_name: faker.helpers.arrayElement([faker.random.word(), undefined]),
  category_id: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    undefined,
  ]),
  category_name: faker.helpers.arrayElement([faker.random.word(), undefined]),
  purchase_date: faker.helpers.arrayElement([
    {
      year: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
      ]),
      month: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
      ]),
      day: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
      ]),
    },
    undefined,
  ]),
  total_price: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    undefined,
  ]),
  products: faker.helpers.arrayElement([
    Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      product_id: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
      ]),
      product_name: faker.helpers.arrayElement([
        faker.random.word(),
        undefined,
      ]),
      price: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
      ]),
    })),
    undefined,
  ]),
});

export const getPatchReceiptsReceiptIdMock = () => ({
  receipt_id: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    undefined,
  ]),
  shop_id: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    undefined,
  ]),
  shop_name: faker.helpers.arrayElement([faker.random.word(), undefined]),
  currency_id: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    undefined,
  ]),
  currency_name: faker.helpers.arrayElement([faker.random.word(), undefined]),
  category_id: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    undefined,
  ]),
  category_name: faker.helpers.arrayElement([faker.random.word(), undefined]),
  purchase_date: faker.helpers.arrayElement([
    {
      year: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
      ]),
      month: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
      ]),
      day: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
      ]),
    },
    undefined,
  ]),
  total_price: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    undefined,
  ]),
  products: faker.helpers.arrayElement([
    Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      product_id: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
      ]),
      product_name: faker.helpers.arrayElement([
        faker.random.word(),
        undefined,
      ]),
      price: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
      ]),
    })),
    undefined,
  ]),
});

export const getReceiptsMSW = () => [
  rest.post("*/receipts", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostReceiptsMock())
    );
  }),
  rest.post("*/receipts/search", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostReceiptsSearchMock())
    );
  }),
  rest.get("*/receipts/:receiptId", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getGetReceiptsReceiptIdMock())
    );
  }),
  rest.patch("*/receipts/:receiptId", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPatchReceiptsReceiptIdMock())
    );
  }),
  rest.delete("*/receipts/:receiptId", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
  }),
];
